module carry_lookahead_adder (
    input [3:0] A,       // 4-bit input operand A
    input [3:0] B,       // 4-bit input operand B
    input Cin,           // Carry-in
    output [3:0] Sum,    // 4-bit sum output
    output Cout          // Carry-out
);

wire [4:0] G, P, generate_carry;
wire [3:0] C;

// Generate (G) and Propagate (P) signals for each bit
assign G = A & B;
assign P = A ^ B;

// Generate the carry lookahead signals
assign generate_carry[0] = G[0] | (P[0] & Cin);
assign generate_carry[1] = G[1] | (P[1] & G[0]) | (P[1] & P[0] & Cin);
assign generate_carry[2] = G[2] | (P[2] & G[1]) | (P[2] & P[1] & G[0]) | (P[2] & P[1] & P[0] & Cin);
assign generate_carry[3] = G[3] | (P[3] & G[2]) | (P[3] & P[2] & G[1]) | (P[3] & P[2] & P[1] & G[0]);

// Calculate the carries
assign C[0] = Cin;
assign C[1] = generate_carry[0];
assign C[2] = generate_carry[1];
assign C[3] = generate_carry[2];

// Calculate the sum bits
assign Sum[0] = A[0] ^ B[0] ^ Cin;
assign Sum[1] = A[1] ^ B[1] ^ C[0];
assign Sum[2] = A[2] ^ B[2] ^ C[1];
assign Sum[3] = A[3] ^ B[3] ^ C[2];

// Carry-out
assign Cout = generate_carry[3];

endmodule
